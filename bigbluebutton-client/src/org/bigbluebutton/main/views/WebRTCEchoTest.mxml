<?xml version="1.0" encoding="utf-8"?>
<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
				xmlns:mate="http://mate.asfusion.com/" 
				width="600" height="350" 
				creationComplete="onCreationComplete()" 
				styleName="micSettingsWindowStyle"
				showCloseButton="false" 
				close="onCancelClicked()" 
				keyDown="handleKeyDown(event)">
	
	<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_STARTED}" method="handleWebRTCEchoTestStartedEvent" />
	<mate:Listener type="{WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_ENDED}" method="handleWebRTCEchoTestEndedEvent" />
	<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_CONNECTING}" method="handleWebRTCCallConnectingEvent" />
	<mate:Listener type="{WebRTCCallEvent.WEBRTC_CALL_STARTED}" method="handleWebRTCCallStartedEvent" />
	
	<mx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import mx.managers.PopUpManager;
			
			import org.bigbluebutton.core.BBB;
			import org.bigbluebutton.main.api.JSAPI;
			import org.bigbluebutton.main.events.BBBEvent;
			import org.bigbluebutton.modules.phone.PhoneOptions;
			import org.bigbluebutton.modules.phone.events.WebRTCCallEvent;
			import org.bigbluebutton.modules.phone.events.WebRTCEchoTestEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOG:String = "Phone::WebRTCEchoTest - ";
			
			private var dotTimer:Timer;
			
			override public function move(x:Number, y:Number):void {
				return;
			}
			
			private function onCancelClicked():void {
				dotTimer.stop();
				PopUpManager.removePopUp(this);
			}
			
			private function handleKeyDown(event:KeyboardEvent):void {
				
			}
			
			private function onCreationComplete():void {
				setCurrentState("connecting");
				lblConnectMessage.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.connectingtoecho');
				dotTimer = new Timer(200, 0);
				dotTimer.addEventListener(TimerEvent.TIMER, dotAnimate);
				dotTimer.start();
			}
			
			private function dotAnimate(e:TimerEvent):void {
				if (lblConnectDots.text.length > 5) {
					lblConnectDots.text = "";
				} else {
					lblConnectDots.text += ".";
				}
			}
			
			private function yesButtonClicked():void {
				trace(LOG + "Echo test passed.");
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new WebRTCEchoTestEvent(WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_HAS_AUDIO));
				setCurrentState("connecting");
				lblConnectMessage.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.endingecho');
			}
			
			private function noButtonClicked():void {
				trace(LOG + "Echo test failed.");
				var dispatcher:Dispatcher = new Dispatcher();
				dispatcher.dispatchEvent(new WebRTCEchoTestEvent(WebRTCEchoTestEvent.WEBRTC_ECHO_TEST_NO_AUDIO));
				onCancelClicked();
			}
			
			private function handleWebRTCEchoTestStartedEvent(e:WebRTCEchoTestEvent):void {
				setCurrentState("started");
				dotTimer.stop();
			}
			
			private function handleWebRTCEchoTestEndedEvent(e:WebRTCEchoTestEvent):void {
				setCurrentState("connecting");
				lblConnectMessage.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.endedecho');
				if (!dotTimer.running) dotTimer.start();
			}
			
			private function handleWebRTCCallConnectingEvent(e:WebRTCCallEvent):void {
				setCurrentState("connecting");
				lblConnectMessage.text = ResourceUtil.getInstance().getString('bbb.micSettings.webrtc.connectingtocall');
				if (!dotTimer.running) dotTimer.start();
			}
			
			private function handleWebRTCCallStartedEvent(e:WebRTCCallEvent):void {
				onCancelClicked();
			}
			
			private function onHelpButtonClicked():void {
				
			}
			
			
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%"  paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
		<mx:Canvas id="cnvTitle" width="100%">
			<mx:TextArea borderSkin="{null}"
						 editable="false"
						 text="Audio Echo Test"
						 styleName="micSettingsWindowTitleStyle"
						 width="400"
						 left="0"/>
			<mx:LinkButton toolTip="{ResourceUtil.getInstance().getString('bbb.mainToolbar.helpBtn')}"
						   label="?"
						   styleName="micSettingsWindowHelpButtonStyle" 
						   right="0"
						   height="22"
						   click="onHelpButtonClicked()"
						   accessibilityName="{ResourceUtil.getInstance().getString('bbb.micSettings.access.helpButton')}"/>
		</mx:Canvas>
	</mx:VBox>
	
	<mx:states>
		<mx:State name="connecting">
			<mx:AddChild relativeTo="cnvTitle" position="after">
				<mx:HBox width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
					<mx:Label id="lblConnectMessage" textAlign="right" styleName="micSettingsWindowSpeakIntoMicLabelStyle" text="" />
					<mx:Label id="lblConnectDots" width="20" textAlign="left" styleName="micSettingsWindowSpeakIntoMicLabelStyle" text="" />
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
		
		<mx:State name="started">
			<mx:AddChild relativeTo="cnvTitle" position="after">
				<mx:VBox width="100%">
					<mx:HBox width="100%">
						<mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.recommendHeadset')}"
								 styleName="micSettingsWindowSpeakIntoMicLabelStyle" />		
						<mx:Image source="@Embed('assets/headset-earbuds.png')"/>          
					</mx:HBox>
					<mx:HBox width="100%">      
						<mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.speakIntoMic')}"
								 styleName="micSettingsWindowSpeakIntoMicLabelStyle" />		
					</mx:HBox>
					<mx:HRule width="100%"/>
					<mx:Spacer height="10"/>
					<mx:HBox width="100%" horizontalAlign="right" horizontalGap="18">
						<mx:Text width="100%" text="{ResourceUtil.getInstance().getString('bbb.micSettings.echoTestMicPrompt')}"
								 styleName="micSettingsWindowSpeakIntoMicLabelStyle" />
						<mx:Button id="yesButton" label="{ResourceUtil.getInstance().getString('bbb.micSettings.echoTestAudioYes')}" 
								   click="yesButtonClicked()" styleName="micSettingsWindowPlaySoundButtonStyle"
								   toolTip=""/>
						<mx:Button id="noButton" 
								   label="{ResourceUtil.getInstance().getString('bbb.micSettings.echoTestAudioNo')}" 
								   styleName="micSettingsWindowPlaySoundButtonStyle"
								   click="noButtonClicked()" 
								   toolTip=""/>
					</mx:HBox>
				</mx:VBox>
			</mx:AddChild>
		</mx:State>
	</mx:states>
</mx:TitleWindow>
